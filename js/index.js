// Generated by CoffeeScript 1.12.4
var Promise, assertType, assertTypes, compression, express, ip, isType, log, now, optionTypes, path, setProto, ssl;

compression = require("compression");

assertTypes = require("assertTypes");

assertType = require("assertType");

setProto = require("setProto");

Promise = require("Promise");

express = require("express");

isType = require("isType");

path = require("path");

now = require("performance-now");

log = require("log");

ip = require("ip");

optionTypes = {
  port: Number.Maybe,
  compress: Boolean.Maybe
};

module.exports = function(options) {
  var app, port, server;
  if (options == null) {
    options = {};
  }
  assertTypes(options, optionTypes);
  app = express();
  server = options.secure ? require("https").createServer(ssl(), app) : require("http").createServer(app);
  port = options.port || process.env.PORT || (options.secure ? 4443 : 8000);
  app.onceReady = (function() {
    var promise, protocol, ref, resolve, url;
    ref = Promise.defer(), promise = ref.promise, resolve = ref.resolve;
    server.listen(port, resolve);
    protocol = options.secure ? "https" : "http";
    url = protocol + "://" + ip.address() + ":" + port;
    return function(callback) {
      return promise.then(function() {
        return callback(url);
      });
    };
  })();
  if (options.compress) {
    app.use(compression());
  }
  app.pipes = [];
  app.addPipe = function(pipe) {
    assertType(pipe, Function);
    app.pipes.push(pipe);
  };
  app.addPipes = function(pipes) {
    var i, len, pipe;
    for (i = 0, len = pipes.length; i < len; i++) {
      pipe = pipes[i];
      assertType(pipe, Function);
      app.pipes.push(pipe);
    }
  };
  app.context = {};
  app.createContext = function() {
    return {};
  };
  app.use(function(req, res) {
    var context, done, index, length, next, pipes, startTime;
    context = app.createContext(req, res);
    setProto(context, app.context);
    length = (pipes = app.pipes).length;
    index = -1;
    startTime = null;
    next = function() {
      var result;
      if (++index === length) {
        return;
      }
      startTime = now();
      result = pipes[index].call(context, req, res);
      if (result && isType(result.then, Function)) {
        return result.then(done);
      } else {
        return done(result);
      }
    };
    done = function(result) {
      log.it(req.method + " " + req.path + " " + (now() - startTime).toFixed(3) + "ms");
      if (res._headerSent) {
        return;
      }
      if (!result) {
        return next();
      }
      if (isType(result, Object)) {
        return res.send(result);
      }
      if (result instanceof Error) {
        if (res.statusCode === 200) {
          res.status(400);
        }
        return res.send({
          error: result.message
        });
      }
      throw Error("Invalid return type: " + result.constructor);
    };
    return Promise["try"](next).then(function() {
      if (res._headerSent) {
        return;
      }
      res.status(404);
      return res.send({
        error: "This page does not exist. Sorry!"
      });
    }).fail(function(error) {
      console.log(error.stack);
      res.status(500);
      return res.send({
        error: "Something bad happened. And it's not your fault. Sorry!"
      });
    });
  });
  return app;
};

ssl = function() {
  var cert, fs, key;
  fs = require("fs");
  key = fs.readFileSync(path.resolve("ssl.key"), "utf8");
  cert = fs.readFileSync(path.resolve("ssl.crt"), "utf8");
  return {
    key: key,
    cert: cert
  };
};
