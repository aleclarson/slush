// Generated by CoffeeScript 1.12.4
var Type, assertType, createRegex, emptyArray, matchRegex, methods, patternType, type;

assertType = require("assertType");

Type = require("Type");

patternType = String.or(RegExp);

emptyArray = [];

methods = ["get", "post", "put", "patch", "delete"];

type = Type("Router");

type.defineValues(function() {
  return {
    _matchers: []
  };
});

methods.forEach(function(method) {
  var METHOD;
  METHOD = method.toUpperCase();
  return type.defineMethod(method, function(pattern, route) {
    var regex;
    assertType(pattern, patternType);
    assertType(route, Function);
    if (pattern.constructor === RegExp) {
      regex = pattern;
      regex.params = emptyArray;
    } else {
      regex = createRegex(pattern);
    }
    this._matchers.push(function(req) {
      if (req.method !== METHOD) {
        return;
      }
      if (matchRegex(req, regex)) {
        return route;
      }
    });
  });
});

type.defineMethods({
  push: function(matcher) {
    assertType(matcher, Function);
    this._matchers.push(matcher);
  },
  match: function(req) {
    var index, match, matchers;
    index = -1;
    matchers = this._matchers;
    while (++index < matchers.length) {
      match = matchers[index](req);
      if (!match) {
        continue;
      }
      if (typeof match === "function") {
        return match;
      }
      return function() {
        return match;
      };
    }
    return null;
  }
});

module.exports = type.build();

createRegex = function(input) {
  var match, paramRegex, params, pattern, regex;
  paramRegex = /\{[^\}]+\}/g;
  params = [];
  pattern = "^" + input + "$";
  while (match = paramRegex.exec(input)) {
    params.push(match[0].slice(1, -1));
    pattern = pattern.replace(match[0], "([^\/]+)");
  }
  regex = new RegExp(pattern, "g");
  regex.params = params;
  return regex;
};

matchRegex = function(req, regex) {
  var match;
  regex.lastIndex = 0;
  if (!(match = regex.exec(req.path))) {
    return false;
  }
  if (match.length === 1) {
    return true;
  }
  match.slice(1).forEach(function(value, index) {
    req.query[regex.params[index] || index] = value;
  });
  return true;
};
