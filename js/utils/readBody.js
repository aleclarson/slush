// Generated by CoffeeScript 1.12.4
var Promise, assertValid, parseJSON;

assertValid = require("assertValid");

Promise = require("Promise");

module.exports = function(req, options) {
  var chunks, consume, length, promise, ref, reject, resolve;
  if (options == null) {
    options = {};
  }
  if (req.body) {
    return Promise.resolve();
  }
  ref = Promise.defer(), promise = ref.promise, resolve = ref.resolve, reject = ref.reject;
  chunks = [];
  length = 0;
  if (options.maxLength == null) {
    options.maxLength = 1e6;
  }
  req.on("data", consume = function(chunk) {
    length += chunk.length;
    if (length > options.maxLength) {
      req.removeListener("data", consume);
      resolve(Error("Cannot exceed " + (options.maxLength / 1e6) + " mb"));
      req.resume();
      return;
    }
    chunks.push(chunk);
  });
  req.on("end", function() {
    if (length && promise.isPending) {
      req.body = Buffer.concat(chunks);
      if (options.json) {
        return parseJSON.call(req, resolve);
      } else {
        req.json = parseJSON;
        return resolve(req.body);
      }
    }
  });
  req.on("error", reject);
  return promise;
};

parseJSON = function(callback) {
  var body;
  assertValid(callback, "function");
  body = this.body.toString();
  return Promise["try"](function() {
    var error, json;
    try {
      json = JSON.parse(body);
    } catch (error1) {
      error = error1;
      return Error("Failed to parse request body\n" + error.message);
    }
    if (!(json && json.constructor === Object)) {
      return Error("Request body must be an object");
    }
    return callback(json);
  });
};
